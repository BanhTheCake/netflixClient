import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { dehydrate, QueryClient } from 'react-query';

import tmdbConfig from '@/utils/config/tmdbConfig';
import MediaSlide from '@/components/Media/MediaSlide';
import HeroSlide from '@/components/global/HeroSlide';
import DefaultLayout from '@/layouts/DefaultLayout';
import { getGenres, getMediaList } from '@/utils/api/media.api';
import { useEffect } from 'react';
import { initAuthState, useAuth } from '@/context/auth.context';

interface HomeProps {
}

export default function Home({ }: HomeProps) {
  return (
    <>
      <Head>
        <title>BanhTheFlix</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DefaultLayout>
        <HeroSlide
          mediaType={tmdbConfig.mediaType.MOVIE}
          mediaCategory={tmdbConfig.mediaCategory.POPULAR}
        />
        <MediaSlide
          mediaType={tmdbConfig.mediaType.MOVIE}
          mediaCategory={tmdbConfig.mediaCategory.POPULAR}
          title={'Popular movies'}
        />
        <MediaSlide
          mediaType={tmdbConfig.mediaType.TV}
          mediaCategory={tmdbConfig.mediaCategory.POPULAR}
          title={'POPULAR SERIES'}
        />
        <MediaSlide
          mediaType={tmdbConfig.mediaType.MOVIE}
          mediaCategory={tmdbConfig.mediaCategory.TOP_RATED}
          title={'TOP RATED MOVIES'}
        />
        <MediaSlide
          mediaType={tmdbConfig.mediaType.TV}
          mediaCategory={tmdbConfig.mediaCategory.TOP_RATED}
          title={'TOP RATED SERIES'}
        />
      </DefaultLayout>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const res = context.res
  const queryClient = new QueryClient();

  await Promise.all([
    queryClient.prefetchQuery(
      ['media', tmdbConfig.mediaType.MOVIE, tmdbConfig.mediaCategory.POPULAR],
      () => getMediaList({
        mediaType: tmdbConfig.mediaType.MOVIE,
        mediaCategory: tmdbConfig.mediaCategory.POPULAR,
        page: '1',
      })
    ),
    queryClient.prefetchQuery(
      ['media', tmdbConfig.mediaType.MOVIE, tmdbConfig.mediaCategory.TOP_RATED],
      () => getMediaList({
        mediaType: tmdbConfig.mediaType.MOVIE,
        mediaCategory: tmdbConfig.mediaCategory.POPULAR,
        page: '1',
      })
    ),
    queryClient.prefetchQuery(
      ['media', tmdbConfig.mediaType.TV, tmdbConfig.mediaCategory.POPULAR],
      () =>
        getMediaList({
          mediaType: tmdbConfig.mediaType.MOVIE,
          mediaCategory: tmdbConfig.mediaCategory.POPULAR,
          page: '1',
        })
    ),
    queryClient.prefetchQuery(
      ['media', tmdbConfig.mediaType.TV, tmdbConfig.mediaCategory.TOP_RATED],
      () => getMediaList({
        mediaType: tmdbConfig.mediaType.MOVIE,
        mediaCategory: tmdbConfig.mediaCategory.POPULAR,
        page: '1',
      })
    ),
    queryClient.prefetchQuery(['genres'], getGenres),
  ]);

  res.setHeader('Cache-Control', 'public, s-maxage=3600, stale-while-revalidate=3600')

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};
